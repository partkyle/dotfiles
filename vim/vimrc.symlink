call pathogen#infect()
call pathogen#helptags()

let mapleader=","
set nocompatible
set number
set ruler
syntax on
set hidden
set encoding=utf-8
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·
set backspace=indent,eol,start
set laststatus=2
set hlsearch
set incsearch
set ignorecase
set smartcase
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,*.pyc,.svn,vendor/gems/*
set autoread
set ff=unix
set scrolloff=3

filetype plugin indent on

" tags
set tags=./tags,../tags,~/tags

let g:netrw_list_hide='.*\.pyc$'
let g:netrw_liststyle=3

map <leader>d :Explore<CR>

nmap <C-c> :nohlsearch<return>

nnoremap ; :
nnoremap j gj
nnoremap k gk
map Y y$

noremap <F1> <Esc>

cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" sudo write
cnoreabbrev w!! %!sudo tee > /dev/null %

set number

set bg=light
let g:solarized_diffmode="high"
colorscheme solarized

" automatically reload vimrc when it's saved
au BufWritePost .vimrc so ~/.vimrc

" Remember last location in file
if has("autocmd")
  autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal g'\"" | endif
endif

function! s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction
autocmd BufRead,BufNewFile *.txt call s:setupWrapping()

autocmd BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Procfile,config.ru,*.rake} set ft=ruby

autocmd BufNewFile,BufRead *.json set ft=javascript

" emacs-isms (so sue me)
nmap <C-x><C-s> :w<CR>
imap <C-x><C-s> <Esc>:w<CR>gi
inoremap          <C-A> <C-O>^
cnoremap          <C-A> <Home>
inoremap          <C-E> <End>
cnoremap          <C-E> <End>
inoremap          <C-F> <C-O>l
cnoremap          <C-F> <C-O>l
inoremap          <C-B> <C-O>h
cnoremap          <C-B> <C-O>h

" open file helpers
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" minibufl explorer
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapCTabSwitchBufs = 1

" mappings that make buffers better
nmap <leader>bn :bn<CR>
nmap <leader>bp :bp<CR>
nmap <leader>bd :bd<CR>

" fuzzy finder settings
map <C-x><C-f> :FufFile<CR>

let g:CommandTMaxHeight=10
let g:CommandTMinHeight=10
map <Leader><Leader> :CommandT<CR>
map <Leader>. :CommandTBuffer<CR>
map <Leader>/ :CommandTFlush<CR>:CommandT<CR>

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Directories for swp and undo files
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set directory=~/.vimswap//,/var/tmp//,/tmp//,.
if exists('+undodir')
  set undofile
  set undodir=~/.vimswap//,/var/tmp//,/tmp//,.
  set undolevels=1000  "maximum number of changes that can be undone
  set undoreload=10000 "maximum number lines to save for undo on a buffer reload
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" % to bounce from do to end etc.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
runtime! macros/matchit.vim

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" custom key mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" I can't believe that :W does nothing
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Wq wq
cnoreabbrev WQ wq
" jj to escape in insert mode.
inoremap jj <Esc>
" ,f to search project
nmap <leader>f :Ack ""<Left>
" git (fugitive) commands
nmap <leader>gs :Gstatus<CR><C-w>J
nmap <leader>gd :Gdiff<CR>
" better moving in insert mode
imap <C-j> <C-o>j
imap <C-k> <C-o>k
" Better split movement
nmap <Space> <C-w>w
nmap <S-Space> <C-w>W
nmap <C-w><C-t> <C-w>T

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MacVIM shift+arrow-keys behavior (required in .vimrc)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let macvim_hig_shift_movement = 1

" Automatically resize splits when resizing MacVim window
if has("gui_running")
  autocmd VimResized * wincmd =
endif

let g:Powerline_colorscheme = 'solarized'
